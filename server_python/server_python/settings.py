"""
Django settings for server_python project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(&a$&we^pmn)*k+=p#yscbx9p9sr@27k_rf@14af2s8cyt_06-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost'
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # session会话
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'login'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # session 会话中间件
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    # 日志记录
    'middleware.visits_log.VisitsLog',
    # 用于处理登录拦截的中间件，自己写的
    'middleware.login_interception.not_login_to_homepage',
    # 'middleware.cors.Cors'
]

SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# 建议配置，阻止 javascript 对会话数据的访问，提高安全性。
SESSION_COOKIE_HTTPONLY = True

ROOT_URLCONF = 'server_python.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # render 的时候，会依次找这些目录下的html文件，会使用list里先匹配到的那个目录里对应的文件
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server_python.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# 多应用的db路由
# DATABASE_ROUTERS = ['server_python.database_router.DatabaseAppsRouter']
# DATABASE_APPS_MAPPING = {
#     # example:
#     # 'app_name':'database_name',
#     # 这些是默认应用
#     'admin': 'default',
#     'auth': 'default',
#     'contenttypes': 'default',
#     'sessions': 'default',
#     'messages': 'default',
#     'staticfiles': 'default',
#     # 这些是自定义应用
#     'login': 'login',
# }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# 设置为中国时间，默认是UTC时间
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 在这里，当访问静态文件时，会自动添加 static
# 例如访问默认应用 admin 时，他会加载 admin/css/base.css，这里配置后，加载的资源链接变为 /static/admin/css/base.css
# 也可以写为：STATIC_URL = 'http://192.168.0.0/static/' 这样的形式（方便CDN）
STATIC_URL = '/static/'

# 配置默认静态文件夹路径
# 在开发环境下，访问静态资源，可以直接访问这里配置的路径下的文件，例如web访问url为 /static/a.html，实际上访问的是根目录下 /static/a.html 这个文件
# 在生产环境下，会将这些目录下的文件复制到 STATIC_ROOT 这里配置的目录中（注意，如果有同名文件，可能会被覆写，他会提示你）
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# 当运行 python manage.py collectstatic 的时候
# STATIC_ROOT 目录，是用来将所有 STATICFILES_DIRS 中所有文件夹中的文件，以及各app中（在INSTALLED_APPS里配置）的static中的文件，都复制到这里配置的文件夹中
# 集中之后，方便通过例如 nginx 服务器，或者 CDN 之类的进行部署
STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')

# 这个是默认设置，Django 默认会在 STATICFILES_DIRS 中的文件夹 和 各app下的static文件夹中找文件
# 注意有先后顺序，找到了就不再继续找了
STATICFILES_FINDERS = (
    # 这个先写的话，如果有重复文件，会优先采用 STATICFILES_DIRS 文件夹中的文件
    "django.contrib.staticfiles.finders.FileSystemFinder",
    # 同上，会优先采用应用中的文件
    "django.contrib.staticfiles.finders.AppDirectoriesFinder"
)
